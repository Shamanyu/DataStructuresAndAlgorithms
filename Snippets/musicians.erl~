-module(musicians).
-behaviour(gen_server).
-export([start_link/2,stop/1]).
-export([init/1,handle_call/3,handle_cast/2,handle_info/2,code_change/3,terminate/2]).

-record(state,{name="",role,skill="good"}).
-define(DELAY,750).

start_link(Role,Skill)->
	gen_server:start_link({local,Role},?MODULE,[Role,Skill],[]).

stop(Role)->
	gen_server:call(Role,stop).
init([Role,Skill])->
	process_flag(trap_exit,true),
	random:seed(now()),
	TimeToPlay=random:uniform(3000),
	Name=pick_name(),
	StrRole=atom_to_list(Role),
	io:format("Musicians ~s, playing the ~s enetered the room~n",[Name,StrRole]).
pick_name()->
	lists:nth(random:uniform(10),firstnames())
	++""++
	lists:nth(random:uniform(10),lastnames()).

firstnames()->
	["Cesar","John","Gary","Branislav","Nemanja","Cesc","Eden","Emboaba","Bhai","Diego"].

lastnames()->
	["Azplicueta","Terry","Cahill","Ivanovic","Matic","Fabregas","Hazard","Oscar","Willian","Costa"].

handle_call(stop,_From,S=#state{})->
	{stop,normal,ok,S};
handle_call(_Message,_From,S)->
	{no_reply,S,?DELAY}.

handle_cast(_Message,S)->
	{no_reply,S,?DELAY}.

handle_info(timeout,S=#state{name=N,skill=good})->
	io:format("~s produced sound ~n",[N]),
	{noreply,S,?DELAY};
handle_info(timeout,S=#state{name=N,skill=bad})->
	case random:uniform(5) of 
		1->
			io:format("~s played a fale note. Uh oh ~n",[N]),
			{stop,bad_note,S};
		_->
			io:format("~s produced sound!~n",[N]),
			{noreply,S,?DELAY}
	end;
handle_info(_Message,S)->
	{noreply,S,?DELAY}.

code_change(_OldVSn,State,_Extra)->
	{ok,State}.

terminate(normal,S)->
	io:format("~s has left the room (~s)~n",[S#state.name,S#state.role]);
terminate(bad_note,S)->
	io:format("~s sucks! Kicked that memeber out of the band! ~s~n",[S#state.name,S#state.role]);
temrinate(shutdown,S)->
	io:format("The manager fired the whoe band!""~s just got back to playing in the subway~n",[S#state.name]);
terminate(_Reason,S)->
	io:format("~s has been kicked out (~s)~n",[S#state.name,S#state.role]).


	
